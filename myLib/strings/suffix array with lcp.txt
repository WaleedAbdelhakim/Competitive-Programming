template<typename T>
vector<int> sort_cyclic_shifts(const T &s) {
    int n = s.size();
    const int alphabet = 256; // change according to the problem
    vector<int> p(n) , g(n) , cnt(max(n , alphabet) , 0);

    for (int i = 0 ;i < n ;i++) cnt[s[i]]++;
    for (int i = 1 ;i < alphabet ;i++) cnt[i] += cnt[i - 1];
    for (int i = 0 ;i < n ;i++) p[--cnt[s[i]]] = i;

    g[p[0]] = 0;
    int groups = 1;
    for (int i = 1 ;i < n ;i++) {
        groups += (s[p[i - 1]] != s[p[i]]);
        g[p[i]] = groups - 1;
    }

    vector<int> pn(n) , gn(n);
    for (int h = 0 ; (1 << h) < n ;h++) {
        fill(cnt.begin() , cnt.begin() + groups , 0);

        for (int i = 0 ;i < n ;i++) pn[i] = (p[i] - (1 << h) + n) % n; 
        for (int i = 0 ;i < n ;i++) cnt[g[pn[i]]]++; 
        for (int i = 1 ;i < groups ;i++) cnt[i] += cnt[i - 1];
        for (int i = n - 1 ;i >= 0 ;i--) p[--cnt[g[pn[i]]]] = pn[i];

        gn[p[0]] = 0;
        groups = 1;
        for (int i = 1 ;i < n ;i++) {
            groups += tie(g[p[i]] , g[(p[i] + (1 << h)) % n])
                      != tie(g[p[i - 1]] , g[(p[i - 1] + (1 << h)) % n]);
            gn[p[i]] = groups - 1;
        }
        g = gn;
    }

    return p;
}

template <typename T>
vector<int> build_lcp(T const& s, const vector<int> &p) {
    int n = s.size();
    vector<int> rank(n, 0);
    for (int i = 0; i < n; i++)
        rank[p[i]] = i;

    int k = 0;
    vector<int> lcp(n-1, 0);
    for (int i = 0; i < n; i++) {
        if (rank[i] == n - 1) {
            k = 0;
            continue;
        }
        int j = p[rank[i] + 1];
        while (i + k < n && j + k < n && s[i+k] == s[j+k])
            k++;
        lcp[rank[i]] = k;
        if (k)
            k--;
    }
    return lcp;
}

template <typename T>
vector<int> suffix_array_construction(T s) {
    s.push_back(*min_element(s.begin() , s.end()) - 1); // don't if you want to sort cyclic strings
    vector<int> sorted_shifts = sort_cyclic_shifts(s);
    sorted_shifts.erase(sorted_shifts.begin());
    return sorted_shifts;
}