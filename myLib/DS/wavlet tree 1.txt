// number of elements greater than or equal k in range [l , r]

#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

//using namespace __gnu_pbds;
using namespace std;

//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef vector<int> vi;
typedef long long ll;

#define pb push_back
#define inf 0x3f3f3f3f
#define all(v) (v).begin() , (v).end()
#define ones(n) __builtin_popcount(n)
#define watch(x) cout << (#x) << " is " << (x) << endl

int di[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dj[] = {1, -1, 0, 0, -1, 1, 1, -1};

const int N = 3e4 + 5;

struct node {
    vi arr, freq;
    int mn, mx , md;
    node *left, *right;

    node() {
        arr = {0};
    }

    void go() {
        mn = *min_element(arr.begin() + 1 , arr.end());
        mx = *max_element(arr.begin() + 1 , arr.end());
        if (mn == mx)
            return;

        freq = vi(arr.size(), 0);
        left = new node;
        right = new node;

        md = mn + (mx - mn) / 2;
        for (int i = 1; i < arr.size(); i++) {
            if (arr[i] <= md) {
                left->arr.pb(arr[i]);
                freq[i] = freq[i - 1] + 1;
            } else {
                right->arr.pb(arr[i]);
                freq[i] = freq[i - 1];
            }
        }

        left->go();
        right->go();
    }

    int query(int s, int e, int k) {
        if (mn == mx)
            return mn > k ? e - s + 1: 0;

        int cnt = freq[e] - freq[s - 1];

        int ret = 0;
        if(k <= md) {
            ret = (e - s + 1) - cnt;
            if(cnt)
                ret += left->query(freq[s - 1] + 1 , freq[e] , k);
        } else if((e - s + 1) - cnt)
            ret = right->query(s - freq[s - 1] , e - freq[e] , k);

        return ret;
    }
};

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.in", "r", stdin);
#endif
    int n, x;
    scanf("%d", &n);

    node root;
    for (int i = 0; i < n; i++) {
        scanf("%d", &x);
        root.arr.pb(x);
    }

    root.go();

    int q, s, e, k;
    scanf("%d", &q);
    while (q--) {
        scanf("%d %d %d", &s, &e, &k);
        printf("%d\n", root.query(s, e, k));
    }
}