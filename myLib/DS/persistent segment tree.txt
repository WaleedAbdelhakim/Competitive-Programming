// number of distincit elements in range using persistent segment tree

#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

//using namespace __gnu_pbds;
using namespace std;

//typedef tree<int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef vector<int> vi;
typedef long long ll;

#define pb push_back
#define inf 0x3f3f3f3f
#define all(v) (v).begin() , (v).end()
#define ones(n) __builtin_popcount(n)
#define watch(x) cout << (#x) << " is " << (x) << endl

int di[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dj[] = {1, -1, 0, 0, -1, 1, 1, -1};

const int N = 1e5 + 5;
int n, k;
int arr[N];
map<int, vi> adj;

struct node {
    int sum = 0;
    node *left, *right;

    node(int sum, node *left, node *right) : sum(sum), left(left), right(right) {}

    node(int sum = 0) : sum(sum), left(this), right(this) {}
};

node *insert(node *cur, int v, int l = -inf, int r = inf) {
    if (v < l || v > r)
        return cur;
    if (l == r)
        return new node(cur->sum + 1);
    int mid = l + ((r - l) >> 1);
    node *left = insert(cur->left, v, l, mid);
    node *right = insert(cur->right, v, mid + 1, r);
    return new node(left->sum + right->sum, left, right);
}

node *roots[N];

int query(node *bs, node *e, int v, int l = -inf, int r = inf) {
    if (l == r)
        return 0;
    int mid = l + ((r - l) >> 1);
    int leftCnt = e->left->sum - bs->left->sum;
    if (v <= mid)
        return query(bs->left, e->left, v, l, mid);
    return leftCnt + query(bs->right, e->right, v, mid + 1, r);
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.in", "r", stdin);
#endif
    scanf("%d", &n);
    k = 1;
    roots[0] = new node;
    for (int i = 1; i <= n; i++) {
        scanf("%d", arr + i);
        int x = adj[arr[i]].size() >= k ? adj[arr[i]][adj[arr[i]].size() - k] : 0;
        adj[arr[i]].pb(i);
        roots[i] = insert(roots[i - 1], x);
    }
    int q, l, r;
    scanf("%d", &q);
    while (q--) {
        scanf("%d%d", &l, &r);
        printf("%d\n", query(roots[l - 1], roots[r], l));
    }
}