#include <bits/stdc++.h>

using namespace std;

template <typename T, class F = function<T(int i , int j , const vector<T> &t)>>
class SparseTable {
public:
    int n;
    vector<T> a;
    vector<vector<T>> sp;
    F func;

    SparseTable(const vector<T> &_a , const F& f) : a(_a) , func(f) {
        n = static_cast<int>(a.size());
        int max_log = 32 - __builtin_clz(n);
        sp.resize(max_log);
        sp[0].resize(n);
        iota(sp[0].begin() , sp[0].end() , 0);
        for (int j = 1; j < max_log; ++j) {
            sp[j].resize(n - (1 << j) + 1);
            for (int i = 0; i <= n - (1 << j); ++i) {
                sp[j][i] = func(sp[j - 1][i], sp[j - 1][i + (1 << (j - 1))] , a);
            }
        }
    }

    T get(int l , int r) const {
        int lg = 32 - __builtin_clz(r - l + 1) - 1;
        return func(sp[lg][l] , sp[lg][r - (1 << lg) + 1] , a);
    }
};

int main() {
    vector<int> b = {1 , 5 , 2 , 9 , -1};
    SparseTable<int> sp(b, [&](int i, int j , const vector<int> &v) {
        if (v[i] < v[j]) // returns the index of the min
            return i;
        return j;
    });
    cout << sp.get(0, 4) << endl;
    cout << sp.get(1 , 3) << endl;
}