const int N = 1e4 + 5;
int n , m;
int low[N] , dfsTime[N] , Time = 1;
vi adj[N];

vector<pair<int , int> > Bridges;
int dfs(int node , int par) {
    if(dfsTime[node])
        return low[node];

    dfsTime[node] = low[node] = Time++;

    for (int child : adj[node]) {
        if(child == par) continue;
        low[node] = min(low[node] , dfs(child , node));
    }

    if(dfsTime[node] == low[node] && par != -1)
        Bridges.pb({par , node});

    return low[node];
}

void FindBridges() {
    for (int i = 1 ;i <= n ;i++)
        if(!dfsTime[i])
            dfs(i , -1);
}