#include <bits/stdc++.h>

using namespace std;

const int N = 1e4 + 5; // number of nodes
vector<int> adj[N];
int val[N]; // number on nodes

struct segtree {
    vector<int> &arr , tree;
    segtree(vector<int> &a) : arr(a) {  // take some array then build segment tree over it
        tree = vector<int> (arr.size() * 4);
        build();
    }

    void build(int l , int r , int pos) {
        if (l == r) {
            tree[pos] = arr[l];
            return;
        }
        int mid = (l + r) / 2;
        build(l , mid , pos * 2);
        build(mid + 1 , r , pos * 2 + 1);
        tree[pos] = max(tree[pos * 2] , tree[pos * 2 + 1]);
    }

    void update (int i , int v , int l , int r , int pos) {
        if (i > r || i < l)
            return;
        if (l == r) {
            tree[pos] = v;
            return;
        }
        int mid = (l + r) / 2;
        update(i , v , l , mid , pos * 2);
        update(i , v , mid + 1 , r , pos * 2 + 1);
        tree[pos] = max(tree[pos * 2] , tree[pos * 2 + 1]);
    }

    int query(int s , int e , int l , int r , int pos) {
        if (l > e || r < s)
            return -1e9;
        if (l >= s && r <= e)
            return tree[pos];
        int mid = (l + r) / 2;
        return max(query(s , e , l , mid , pos * 2) , query(s , e , mid + 1 , r , pos * 2 + 1));
    }

public:
    void build() {
        build(0 , arr.size() - 1 , 1);
    }

    void update(int i , int v) {
        update(i , v , 0 , arr.size() - 1 , 1);
    }

    int query(int s , int e) {
        return query(s , e , 0 , arr.size() - 1 , 1);
    }
};

class HeavyLight {
    int hvy[N] , par[N] , dep[N] , head[N] , pos[N];
    // pos : pos of every node in the array of chains
    // dep : depth of every node
    // hvy : the hvy child of every node -1 if leaf
    // par : parent of every node -1 if root
    // head : head of chain of the ith node

    vector<int> arr;
    segtree *st;

    int dfs(int u) {
        int sz = 0 , mx = -1 ;
        hvy[u] = -1;
        for (int v : adj[u]) {
            if (v != par[u]) {
                par[v] = u;
                dep[v] = dep[u] + 1;
                int v_size = dfs(v);
                if (v_size > mx) {
                    mx = v_size;
                    hvy[u] = v;
                }
                sz += v_size;
            }
        }
        return sz;
    }

    void build_chains(int u) {
        head[u] = par[u] != -1 && hvy[par[u]] == u ? head[par[u]] : u;

        pos[u] = arr.size();
        arr.push_back(val[u]);

        if (hvy[u] != -1)
            build_chains(hvy[u]);

        for (int v : adj[u])
            if (v != par[u] && v != hvy[u])
                build_chains(v);
    }

public:
    HeavyLight (int root) {
        par[root] = -1;
        dep[root] = 0;
        dfs(root);
        build_chains(root);
        st = new segtree(arr);
    }

    int query(int a , int b) {
        int mx = 0;
        while (head[a] != head[b]) {
            if (dep[head[a]] < dep[head[b]])
                swap(a , b);
            mx = max(mx , st->query(pos[head[a]] , pos[a]));
            a = par[head[a]];
        }
        return max(mx , st->query(min(pos[a] , pos[b]) , max(pos[a] , pos[b])));
    }
};


void init() { // every test case
    for (int i = 0 ;i < N ;i++)
        adj[i].clear();
}

